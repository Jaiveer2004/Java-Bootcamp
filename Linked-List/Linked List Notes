Linked List in JAVA:
Why do we use Linked List over Arrays/ArrayList?

1. Linked Lists have dynamic Size:
    * Arrays: Arrays in Java have a fixed size, which must be defined at the time of creation. If you need to store more elements than the array's capacity, you have to create a new, larger array and copy the existing elements into it, which is inefficient.
    * ArrayList: ArrayList is a dynamic array (part of Java's Collections Framework) that automatically resizes by creating a new internal array and copying elements when it runs out of space. However, this resizing operation (doubling the capacity) can be costly in terms of time complexity, especially for large datasets.
    * Linked List: A Linked List is inherently dynamic. It grows or shrinks one node at a time as elements are added or removed. There's no need to predefine a size or copy elements to a new structure, making it more flexible for situations where the size of the data is unknown or changes frequently.

2. Efficient Insertions and Deletions
    * Arrays: Inserting or deleting an element in an array (e.g., in the middle) requires shifting all subsequent elements to fill the gap or make space. This operation has a time complexity of O(n), where n is the number of elements.
    * ArrayList: Similar to arrays, ArrayList also requires shifting elements during insertion or deletion (except at the end), leading to O(n) time complexity for these operations.
    * Linked List: In a Linked List, insertion and deletion are much more efficient, especially when you already have a reference to the node where the operation occurs. You simply adjust the pointers (links) of the adjacent nodes, which takes O(1) time. However, finding the position to insert/delete may take O(n) if you don't have direct access to the node.

3. Memory Utilization
    * Arrays: Arrays allocate contiguous memory locations for all elements. If the reserved space isn't fully utilized (e.g., you allocate an array of size 100 but only use 10 elements), it leads to wasted memory. Also, resizing requires additional memory temporarily during the copy process.
    * ArrayList: ArrayList also uses contiguous memory and faces similar memory inefficiencies. Its internal array may be larger than needed due to its resizing strategy (e.g., capacity doubles when full).
    * Linked List: Linked Lists allocate memory dynamically for each node as needed. Nodes are not stored contiguously, so there's no wasted space for unused capacity. However, this comes at the cost of extra memory for storing pointers (references to the next node, and in doubly linked lists, the previous node too).

4. No Need for Contiguous Memory
    * Arrays/ArrayList: Both require contiguous blocks of memory, which can be problematic in systems with limited memory or heavy fragmentation. If a large enough contiguous block isn't available, the allocation fails.
    * Linked List: Nodes in a Linked List can be scattered across memory, connected only by pointers. This makes Linked Lists more adaptable in environments where memory is fragmented.

5. Use Case-Specific Advantages
    * Traversal: Arrays and ArrayLists are faster for random access (O(1) time using an index), while Linked Lists require O(n) time to traverse to a specific position. However, Linked Lists excel in sequential traversal scenarios (e.g., iterating through all elements).
    * Special Structures: Linked Lists serve as the foundation for advanced data structures like stacks, queues, and deques, where frequent additions/removals at the ends or specific positions are needed.
    * Real-World Examples: Undo/redo functionality (doubly linked lists), browser history, or music playlists often use Linked Lists because of their flexibility in linking elements dynamically.

# Summary: When to Use Linked Lists Over Arrays/ArrayList?
* Use Linked Lists when:
    * The size of the list is unknown or highly variable.
    * You need frequent insertions/deletions, especially in the middle or at specific positions.
    * Memory fragmentation is a concern, or contiguous memory is not guaranteed.
    * The application involves sequential access rather than random access.
    * Stick with Arrays/ArrayList when:
    * You need fast random access to elements.
    * The size is relatively stable or predictable.
    * Memory efficiency and cache performance are critical.

Introduction to Linked Lists:
